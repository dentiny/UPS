// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UA.proto

#include "UA.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtoULoadFinishRequest_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AtoUPickupRequest_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Delivery_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorMessage_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Product_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShipInfo_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserValidationRequest_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserValidationResponse_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtoAConnect_UA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtoALoadRequest_UA_2eproto;
class UtoAConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtoAConnect> _instance;
} _UtoAConnect_default_instance_;
class UserValidationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserValidationRequest> _instance;
} _UserValidationRequest_default_instance_;
class UserValidationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserValidationResponse> _instance;
} _UserValidationResponse_default_instance_;
class AtoUPickupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtoUPickupRequest> _instance;
} _AtoUPickupRequest_default_instance_;
class UtoALoadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtoALoadRequest> _instance;
} _UtoALoadRequest_default_instance_;
class ProductDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Product> _instance;
} _Product_default_instance_;
class ShipInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShipInfo> _instance;
} _ShipInfo_default_instance_;
class AtoULoadFinishRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtoULoadFinishRequest> _instance;
} _AtoULoadFinishRequest_default_instance_;
class DeliveryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Delivery> _instance;
} _Delivery_default_instance_;
class AtoUCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtoUCommand> _instance;
} _AtoUCommand_default_instance_;
class UtoACommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtoACommand> _instance;
} _UtoACommand_default_instance_;
class ErrorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorMessage> _instance;
} _ErrorMessage_default_instance_;
static void InitDefaultsscc_info_AtoUCommand_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AtoUCommand_default_instance_;
    new (ptr) ::AtoUCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AtoUCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AtoUCommand_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AtoUCommand_UA_2eproto}, {
      &scc_info_UserValidationRequest_UA_2eproto.base,
      &scc_info_AtoUPickupRequest_UA_2eproto.base,
      &scc_info_AtoULoadFinishRequest_UA_2eproto.base,
      &scc_info_ErrorMessage_UA_2eproto.base,}};

static void InitDefaultsscc_info_AtoULoadFinishRequest_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AtoULoadFinishRequest_default_instance_;
    new (ptr) ::AtoULoadFinishRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AtoULoadFinishRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtoULoadFinishRequest_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AtoULoadFinishRequest_UA_2eproto}, {}};

static void InitDefaultsscc_info_AtoUPickupRequest_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AtoUPickupRequest_default_instance_;
    new (ptr) ::AtoUPickupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AtoUPickupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AtoUPickupRequest_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AtoUPickupRequest_UA_2eproto}, {
      &scc_info_ShipInfo_UA_2eproto.base,}};

static void InitDefaultsscc_info_Delivery_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Delivery_default_instance_;
    new (ptr) ::Delivery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Delivery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Delivery_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Delivery_UA_2eproto}, {}};

static void InitDefaultsscc_info_ErrorMessage_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ErrorMessage_default_instance_;
    new (ptr) ::ErrorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ErrorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorMessage_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorMessage_UA_2eproto}, {}};

static void InitDefaultsscc_info_Product_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Product_default_instance_;
    new (ptr) ::Product();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Product::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Product_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Product_UA_2eproto}, {}};

static void InitDefaultsscc_info_ShipInfo_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShipInfo_default_instance_;
    new (ptr) ::ShipInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShipInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShipInfo_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShipInfo_UA_2eproto}, {
      &scc_info_Product_UA_2eproto.base,}};

static void InitDefaultsscc_info_UserValidationRequest_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserValidationRequest_default_instance_;
    new (ptr) ::UserValidationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserValidationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserValidationRequest_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserValidationRequest_UA_2eproto}, {}};

static void InitDefaultsscc_info_UserValidationResponse_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserValidationResponse_default_instance_;
    new (ptr) ::UserValidationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserValidationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserValidationResponse_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserValidationResponse_UA_2eproto}, {}};

static void InitDefaultsscc_info_UtoACommand_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UtoACommand_default_instance_;
    new (ptr) ::UtoACommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UtoACommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_UtoACommand_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_UtoACommand_UA_2eproto}, {
      &scc_info_UtoAConnect_UA_2eproto.base,
      &scc_info_UserValidationResponse_UA_2eproto.base,
      &scc_info_UtoALoadRequest_UA_2eproto.base,
      &scc_info_Delivery_UA_2eproto.base,
      &scc_info_ErrorMessage_UA_2eproto.base,}};

static void InitDefaultsscc_info_UtoAConnect_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UtoAConnect_default_instance_;
    new (ptr) ::UtoAConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UtoAConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtoAConnect_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UtoAConnect_UA_2eproto}, {}};

static void InitDefaultsscc_info_UtoALoadRequest_UA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UtoALoadRequest_default_instance_;
    new (ptr) ::UtoALoadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UtoALoadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtoALoadRequest_UA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UtoALoadRequest_UA_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UA_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_UA_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UA_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UA_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UtoAConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UtoAConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UtoAConnect, seqnum_),
  PROTOBUF_FIELD_OFFSET(::UtoAConnect, worldid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UserValidationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserValidationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserValidationRequest, seqnum_),
  PROTOBUF_FIELD_OFFSET(::UserValidationRequest, upsaccount_),
  PROTOBUF_FIELD_OFFSET(::UserValidationRequest, shipid_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::UserValidationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserValidationResponse, seqnum_),
  PROTOBUF_FIELD_OFFSET(::UserValidationResponse, result_),
  PROTOBUF_FIELD_OFFSET(::UserValidationResponse, shipid_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::AtoUPickupRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AtoUPickupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AtoUPickupRequest, seqnum_),
  PROTOBUF_FIELD_OFFSET(::AtoUPickupRequest, warehouseid_),
  PROTOBUF_FIELD_OFFSET(::AtoUPickupRequest, shipment_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::UtoALoadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UtoALoadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UtoALoadRequest, seqnum_),
  PROTOBUF_FIELD_OFFSET(::UtoALoadRequest, warehouseid_),
  PROTOBUF_FIELD_OFFSET(::UtoALoadRequest, truckid_),
  PROTOBUF_FIELD_OFFSET(::UtoALoadRequest, shipid_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Product, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Product, description_),
  PROTOBUF_FIELD_OFFSET(::Product, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ShipInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ShipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ShipInfo, shipid_),
  PROTOBUF_FIELD_OFFSET(::ShipInfo, upsaccount_),
  PROTOBUF_FIELD_OFFSET(::ShipInfo, products_),
  PROTOBUF_FIELD_OFFSET(::ShipInfo, destination_x_),
  PROTOBUF_FIELD_OFFSET(::ShipInfo, destination_y_),
  1,
  0,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::AtoULoadFinishRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AtoULoadFinishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AtoULoadFinishRequest, seqnum_),
  PROTOBUF_FIELD_OFFSET(::AtoULoadFinishRequest, shipid_),
  PROTOBUF_FIELD_OFFSET(::AtoULoadFinishRequest, truckid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::Delivery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Delivery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Delivery, seqnum_),
  PROTOBUF_FIELD_OFFSET(::Delivery, shipid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, usrvlid_),
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, pikreq_),
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, loadreq_),
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, errmsg_),
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, ack_),
  PROTOBUF_FIELD_OFFSET(::AtoUCommand, disconnection_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::UtoACommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UtoACommand, connection_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, usrvlid_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, loadreq_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, delivery_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, errmsg_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, ack_),
  PROTOBUF_FIELD_OFFSET(::UtoACommand, disconnection_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, err_),
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, originseqnum_),
  PROTOBUF_FIELD_OFFSET(::ErrorMessage, seqnum_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::UtoAConnect)},
  { 9, 17, sizeof(::UserValidationRequest)},
  { 20, 28, sizeof(::UserValidationResponse)},
  { 31, 39, sizeof(::AtoUPickupRequest)},
  { 42, 51, sizeof(::UtoALoadRequest)},
  { 55, 62, sizeof(::Product)},
  { 64, 74, sizeof(::ShipInfo)},
  { 79, 87, sizeof(::AtoULoadFinishRequest)},
  { 90, 97, sizeof(::Delivery)},
  { 99, 110, sizeof(::AtoUCommand)},
  { 116, 128, sizeof(::UtoACommand)},
  { 135, 143, sizeof(::ErrorMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UtoAConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserValidationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserValidationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AtoUPickupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UtoALoadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Product_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShipInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AtoULoadFinishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Delivery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AtoUCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UtoACommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ErrorMessage_default_instance_),
};

const char descriptor_table_protodef_UA_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010UA.proto\".\n\013UtoAConnect\022\016\n\006seqNum\030\001 \002("
  "\003\022\017\n\007worldId\030\002 \002(\003\"K\n\025UserValidationRequ"
  "est\022\016\n\006seqNum\030\001 \002(\003\022\022\n\nUPSaccount\030\002 \002(\t\022"
  "\016\n\006shipid\030\003 \002(\003\"H\n\026UserValidationRespons"
  "e\022\016\n\006seqNum\030\001 \002(\003\022\016\n\006result\030\002 \002(\010\022\016\n\006shi"
  "pid\030\003 \002(\003\"U\n\021AtoUPickupRequest\022\016\n\006seqNum"
  "\030\001 \002(\003\022\023\n\013warehouseId\030\002 \002(\003\022\033\n\010shipment\030"
  "\003 \003(\0132\t.ShipInfo\"W\n\017UtoALoadRequest\022\016\n\006s"
  "eqNum\030\001 \002(\003\022\023\n\013warehouseId\030\002 \002(\003\022\017\n\007truc"
  "kId\030\003 \002(\003\022\016\n\006shipId\030\004 \003(\003\"-\n\007Product\022\023\n\013"
  "description\030\001 \002(\t\022\r\n\005count\030\002 \002(\005\"x\n\010Ship"
  "Info\022\016\n\006shipId\030\001 \002(\003\022\022\n\nUPSaccount\030\002 \001(\t"
  "\022\032\n\010products\030\003 \003(\0132\010.Product\022\025\n\rdestinat"
  "ion_x\030\004 \002(\003\022\025\n\rdestination_y\030\005 \002(\003\"H\n\025At"
  "oULoadFinishRequest\022\016\n\006seqNum\030\001 \002(\003\022\016\n\006s"
  "hipId\030\002 \003(\003\022\017\n\007truckId\030\003 \002(\003\"*\n\010Delivery"
  "\022\016\n\006seqNum\030\001 \002(\003\022\016\n\006shipId\030\002 \002(\003\"\306\001\n\013Ato"
  "UCommand\022\'\n\007usrVlid\030\001 \003(\0132\026.UserValidati"
  "onRequest\022\"\n\006pikReq\030\002 \003(\0132\022.AtoUPickupRe"
  "quest\022\'\n\007loadReq\030\003 \003(\0132\026.AtoULoadFinishR"
  "equest\022\035\n\006errMsg\030\004 \003(\0132\r.ErrorMessage\022\013\n"
  "\003ack\030\005 \003(\003\022\025\n\rdisconnection\030\006 \001(\010\"\334\001\n\013Ut"
  "oACommand\022 \n\nconnection\030\001 \003(\0132\014.UtoAConn"
  "ect\022(\n\007usrVlid\030\002 \003(\0132\027.UserValidationRes"
  "ponse\022!\n\007loadReq\030\003 \003(\0132\020.UtoALoadRequest"
  "\022\033\n\010delivery\030\004 \003(\0132\t.Delivery\022\035\n\006errMsg\030"
  "\005 \003(\0132\r.ErrorMessage\022\013\n\003ack\030\006 \003(\003\022\025\n\rdis"
  "connection\030\007 \001(\010\"A\n\014ErrorMessage\022\013\n\003err\030"
  "\001 \002(\t\022\024\n\014originseqnum\030\002 \002(\003\022\016\n\006seqNum\030\003 "
  "\002(\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_UA_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_UA_2eproto_sccs[12] = {
  &scc_info_AtoUCommand_UA_2eproto.base,
  &scc_info_AtoULoadFinishRequest_UA_2eproto.base,
  &scc_info_AtoUPickupRequest_UA_2eproto.base,
  &scc_info_Delivery_UA_2eproto.base,
  &scc_info_ErrorMessage_UA_2eproto.base,
  &scc_info_Product_UA_2eproto.base,
  &scc_info_ShipInfo_UA_2eproto.base,
  &scc_info_UserValidationRequest_UA_2eproto.base,
  &scc_info_UserValidationResponse_UA_2eproto.base,
  &scc_info_UtoACommand_UA_2eproto.base,
  &scc_info_UtoAConnect_UA_2eproto.base,
  &scc_info_UtoALoadRequest_UA_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UA_2eproto_once;
static bool descriptor_table_UA_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UA_2eproto = {
  &descriptor_table_UA_2eproto_initialized, descriptor_table_protodef_UA_2eproto, "UA.proto", 1163,
  &descriptor_table_UA_2eproto_once, descriptor_table_UA_2eproto_sccs, descriptor_table_UA_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_UA_2eproto::offsets,
  file_level_metadata_UA_2eproto, 12, file_level_enum_descriptors_UA_2eproto, file_level_service_descriptors_UA_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_UA_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_UA_2eproto), true);

// ===================================================================

void UtoAConnect::InitAsDefaultInstance() {
}
class UtoAConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<UtoAConnect>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UtoAConnect::UtoAConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UtoAConnect)
}
UtoAConnect::UtoAConnect(const UtoAConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&worldid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(worldid_));
  // @@protoc_insertion_point(copy_constructor:UtoAConnect)
}

void UtoAConnect::SharedCtor() {
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worldid_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(worldid_));
}

UtoAConnect::~UtoAConnect() {
  // @@protoc_insertion_point(destructor:UtoAConnect)
  SharedDtor();
}

void UtoAConnect::SharedDtor() {
}

void UtoAConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtoAConnect& UtoAConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtoAConnect_UA_2eproto.base);
  return *internal_default_instance();
}


void UtoAConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:UtoAConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&worldid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(worldid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UtoAConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 worldId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtoAConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UtoAConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // required int64 worldId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UtoAConnect)
  return target;
}

size_t UtoAConnect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UtoAConnect)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_worldid()) {
    // required int64 worldId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  return total_size;
}
size_t UtoAConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UtoAConnect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 worldId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtoAConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UtoAConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const UtoAConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtoAConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UtoAConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UtoAConnect)
    MergeFrom(*source);
  }
}

void UtoAConnect::MergeFrom(const UtoAConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UtoAConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      worldid_ = from.worldid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UtoAConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UtoAConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtoAConnect::CopyFrom(const UtoAConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UtoAConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtoAConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UtoAConnect::InternalSwap(UtoAConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seqnum_, other->seqnum_);
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtoAConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserValidationRequest::InitAsDefaultInstance() {
}
class UserValidationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UserValidationRequest>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upsaccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserValidationRequest::UserValidationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserValidationRequest)
}
UserValidationRequest::UserValidationRequest(const UserValidationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upsaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_upsaccount()) {
    upsaccount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.upsaccount_);
  }
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&shipid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(shipid_));
  // @@protoc_insertion_point(copy_constructor:UserValidationRequest)
}

void UserValidationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserValidationRequest_UA_2eproto.base);
  upsaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shipid_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(shipid_));
}

UserValidationRequest::~UserValidationRequest() {
  // @@protoc_insertion_point(destructor:UserValidationRequest)
  SharedDtor();
}

void UserValidationRequest::SharedDtor() {
  upsaccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserValidationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserValidationRequest& UserValidationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserValidationRequest_UA_2eproto.base);
  return *internal_default_instance();
}


void UserValidationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserValidationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    upsaccount_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shipid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(shipid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserValidationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UPSaccount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_upsaccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserValidationRequest.UPSaccount");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 shipid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserValidationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserValidationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // required string UPSaccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upsaccount().data(), static_cast<int>(this->_internal_upsaccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "UserValidationRequest.UPSaccount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upsaccount(), target);
  }

  // required int64 shipid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_shipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserValidationRequest)
  return target;
}

size_t UserValidationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UserValidationRequest)
  size_t total_size = 0;

  if (_internal_has_upsaccount()) {
    // required string UPSaccount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upsaccount());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_shipid()) {
    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  return total_size;
}
size_t UserValidationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserValidationRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string UPSaccount = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upsaccount());

    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserValidationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserValidationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserValidationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserValidationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserValidationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserValidationRequest)
    MergeFrom(*source);
  }
}

void UserValidationRequest::MergeFrom(const UserValidationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserValidationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      upsaccount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.upsaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      shipid_ = from.shipid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserValidationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserValidationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserValidationRequest::CopyFrom(const UserValidationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserValidationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserValidationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserValidationRequest::InternalSwap(UserValidationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  upsaccount_.Swap(&other->upsaccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seqnum_, other->seqnum_);
  swap(shipid_, other->shipid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserValidationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserValidationResponse::InitAsDefaultInstance() {
}
class UserValidationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UserValidationResponse>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserValidationResponse::UserValidationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserValidationResponse)
}
UserValidationResponse::UserValidationResponse(const UserValidationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:UserValidationResponse)
}

void UserValidationResponse::SharedCtor() {
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(result_));
}

UserValidationResponse::~UserValidationResponse() {
  // @@protoc_insertion_point(destructor:UserValidationResponse)
  SharedDtor();
}

void UserValidationResponse::SharedDtor() {
}

void UserValidationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserValidationResponse& UserValidationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserValidationResponse_UA_2eproto.base);
  return *internal_default_instance();
}


void UserValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserValidationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 shipid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserValidationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserValidationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // required bool result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // required int64 shipid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_shipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserValidationResponse)
  return target;
}

size_t UserValidationResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UserValidationResponse)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_shipid()) {
    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_result()) {
    // required bool result = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UserValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserValidationResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required bool result = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserValidationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserValidationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserValidationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserValidationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserValidationResponse)
    MergeFrom(*source);
  }
}

void UserValidationResponse::MergeFrom(const UserValidationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserValidationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserValidationResponse::CopyFrom(const UserValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserValidationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserValidationResponse::InternalSwap(UserValidationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seqnum_, other->seqnum_);
  swap(shipid_, other->shipid_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserValidationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AtoUPickupRequest::InitAsDefaultInstance() {
}
class AtoUPickupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AtoUPickupRequest>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_warehouseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AtoUPickupRequest::AtoUPickupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AtoUPickupRequest)
}
AtoUPickupRequest::AtoUPickupRequest(const AtoUPickupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shipment_(from.shipment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&warehouseid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(warehouseid_));
  // @@protoc_insertion_point(copy_constructor:AtoUPickupRequest)
}

void AtoUPickupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AtoUPickupRequest_UA_2eproto.base);
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warehouseid_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(warehouseid_));
}

AtoUPickupRequest::~AtoUPickupRequest() {
  // @@protoc_insertion_point(destructor:AtoUPickupRequest)
  SharedDtor();
}

void AtoUPickupRequest::SharedDtor() {
}

void AtoUPickupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtoUPickupRequest& AtoUPickupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtoUPickupRequest_UA_2eproto.base);
  return *internal_default_instance();
}


void AtoUPickupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AtoUPickupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&warehouseid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(warehouseid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AtoUPickupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 warehouseId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_warehouseid(&has_bits);
          warehouseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ShipInfo shipment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shipment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AtoUPickupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AtoUPickupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // required int64 warehouseId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_warehouseid(), target);
  }

  // repeated .ShipInfo shipment = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shipment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shipment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AtoUPickupRequest)
  return target;
}

size_t AtoUPickupRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AtoUPickupRequest)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_warehouseid()) {
    // required int64 warehouseId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_warehouseid());
  }

  return total_size;
}
size_t AtoUPickupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AtoUPickupRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 warehouseId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_warehouseid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ShipInfo shipment = 3;
  total_size += 1UL * this->_internal_shipment_size();
  for (const auto& msg : this->shipment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtoUPickupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AtoUPickupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AtoUPickupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AtoUPickupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AtoUPickupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AtoUPickupRequest)
    MergeFrom(*source);
  }
}

void AtoUPickupRequest::MergeFrom(const AtoUPickupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AtoUPickupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shipment_.MergeFrom(from.shipment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      warehouseid_ = from.warehouseid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AtoUPickupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AtoUPickupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtoUPickupRequest::CopyFrom(const AtoUPickupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AtoUPickupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtoUPickupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shipment_)) return false;
  return true;
}

void AtoUPickupRequest::InternalSwap(AtoUPickupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shipment_.InternalSwap(&other->shipment_);
  swap(seqnum_, other->seqnum_);
  swap(warehouseid_, other->warehouseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtoUPickupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UtoALoadRequest::InitAsDefaultInstance() {
}
class UtoALoadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UtoALoadRequest>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_warehouseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UtoALoadRequest::UtoALoadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UtoALoadRequest)
}
UtoALoadRequest::UtoALoadRequest(const UtoALoadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shipid_(from.shipid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UtoALoadRequest)
}

void UtoALoadRequest::SharedCtor() {
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&truckid_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
}

UtoALoadRequest::~UtoALoadRequest() {
  // @@protoc_insertion_point(destructor:UtoALoadRequest)
  SharedDtor();
}

void UtoALoadRequest::SharedDtor() {
}

void UtoALoadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtoALoadRequest& UtoALoadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtoALoadRequest_UA_2eproto.base);
  return *internal_default_instance();
}


void UtoALoadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UtoALoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UtoALoadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 warehouseId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_warehouseid(&has_bits);
          warehouseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 truckId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shipId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shipid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shipid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtoALoadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UtoALoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // required int64 warehouseId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_warehouseid(), target);
  }

  // required int64 truckId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_truckid(), target);
  }

  // repeated int64 shipId = 4;
  for (int i = 0, n = this->_internal_shipid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_shipid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UtoALoadRequest)
  return target;
}

size_t UtoALoadRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UtoALoadRequest)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_warehouseid()) {
    // required int64 warehouseId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_warehouseid());
  }

  if (_internal_has_truckid()) {
    // required int64 truckId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_truckid());
  }

  return total_size;
}
size_t UtoALoadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UtoALoadRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 warehouseId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_warehouseid());

    // required int64 truckId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shipId = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shipid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shipid_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtoALoadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UtoALoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtoALoadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtoALoadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UtoALoadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UtoALoadRequest)
    MergeFrom(*source);
  }
}

void UtoALoadRequest::MergeFrom(const UtoALoadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UtoALoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shipid_.MergeFrom(from.shipid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      warehouseid_ = from.warehouseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UtoALoadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UtoALoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtoALoadRequest::CopyFrom(const UtoALoadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UtoALoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtoALoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UtoALoadRequest::InternalSwap(UtoALoadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shipid_.InternalSwap(&other->shipid_);
  swap(seqnum_, other->seqnum_);
  swap(warehouseid_, other->warehouseid_);
  swap(truckid_, other->truckid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtoALoadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Product::InitAsDefaultInstance() {
}
class Product::_Internal {
 public:
  using HasBits = decltype(std::declval<Product>()._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Product::Product()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Product)
}
Product::Product(const Product& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:Product)
}

void Product::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Product_UA_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:Product)
  SharedDtor();
}

void Product::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Product::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Product& Product::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Product_UA_2eproto.base);
  return *internal_default_instance();
}


void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:Product)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmptyNoArena();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Product::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Product.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Product::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Product)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Product.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Product)
  return target;
}

size_t Product::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Product)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_count()) {
    // required int32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Product)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string description = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required int32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Product::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Product)
  GOOGLE_DCHECK_NE(&from, this);
  const Product* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Product>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Product)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Product)
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Product)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Product::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Product::InternalSwap(Product* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Product::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShipInfo::InitAsDefaultInstance() {
}
class ShipInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ShipInfo>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upsaccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_destination_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ShipInfo::ShipInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShipInfo)
}
ShipInfo::ShipInfo(const ShipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      products_(from.products_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upsaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_upsaccount()) {
    upsaccount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.upsaccount_);
  }
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_y_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(destination_y_));
  // @@protoc_insertion_point(copy_constructor:ShipInfo)
}

void ShipInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShipInfo_UA_2eproto.base);
  upsaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_y_) -
      reinterpret_cast<char*>(&shipid_)) + sizeof(destination_y_));
}

ShipInfo::~ShipInfo() {
  // @@protoc_insertion_point(destructor:ShipInfo)
  SharedDtor();
}

void ShipInfo::SharedDtor() {
  upsaccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShipInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShipInfo& ShipInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShipInfo_UA_2eproto.base);
  return *internal_default_instance();
}


void ShipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ShipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  products_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    upsaccount_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_y_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(destination_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ShipInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 shipId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string UPSaccount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_upsaccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ShipInfo.UPSaccount");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Product products = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required int64 destination_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_destination_x(&has_bits);
          destination_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 destination_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_destination_y(&has_bits);
          destination_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShipInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // optional string UPSaccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upsaccount().data(), static_cast<int>(this->_internal_upsaccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ShipInfo.UPSaccount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upsaccount(), target);
  }

  // repeated .Product products = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_products_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_products(i), target, stream);
  }

  // required int64 destination_x = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_destination_x(), target);
  }

  // required int64 destination_y = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_destination_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShipInfo)
  return target;
}

size_t ShipInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ShipInfo)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_destination_x()) {
    // required int64 destination_x = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destination_x());
  }

  if (_internal_has_destination_y()) {
    // required int64 destination_y = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destination_y());
  }

  return total_size;
}
size_t ShipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShipInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int64 shipId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int64 destination_x = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destination_x());

    // required int64 destination_y = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_destination_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Product products = 3;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->products_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string UPSaccount = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upsaccount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShipInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShipInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShipInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShipInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShipInfo)
    MergeFrom(*source);
  }
}

void ShipInfo::MergeFrom(const ShipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  products_.MergeFrom(from.products_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      upsaccount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.upsaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000004u) {
      destination_x_ = from.destination_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      destination_y_ = from.destination_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShipInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipInfo::CopyFrom(const ShipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(products_)) return false;
  return true;
}

void ShipInfo::InternalSwap(ShipInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  products_.InternalSwap(&other->products_);
  upsaccount_.Swap(&other->upsaccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shipid_, other->shipid_);
  swap(destination_x_, other->destination_x_);
  swap(destination_y_, other->destination_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShipInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AtoULoadFinishRequest::InitAsDefaultInstance() {
}
class AtoULoadFinishRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AtoULoadFinishRequest>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AtoULoadFinishRequest::AtoULoadFinishRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AtoULoadFinishRequest)
}
AtoULoadFinishRequest::AtoULoadFinishRequest(const AtoULoadFinishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shipid_(from.shipid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:AtoULoadFinishRequest)
}

void AtoULoadFinishRequest::SharedCtor() {
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&truckid_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
}

AtoULoadFinishRequest::~AtoULoadFinishRequest() {
  // @@protoc_insertion_point(destructor:AtoULoadFinishRequest)
  SharedDtor();
}

void AtoULoadFinishRequest::SharedDtor() {
}

void AtoULoadFinishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtoULoadFinishRequest& AtoULoadFinishRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtoULoadFinishRequest_UA_2eproto.base);
  return *internal_default_instance();
}


void AtoULoadFinishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AtoULoadFinishRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shipid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AtoULoadFinishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shipId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shipid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shipid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 truckId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AtoULoadFinishRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AtoULoadFinishRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // repeated int64 shipId = 2;
  for (int i = 0, n = this->_internal_shipid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_shipid(i), target);
  }

  // required int64 truckId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_truckid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AtoULoadFinishRequest)
  return target;
}

size_t AtoULoadFinishRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AtoULoadFinishRequest)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_truckid()) {
    // required int64 truckId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_truckid());
  }

  return total_size;
}
size_t AtoULoadFinishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AtoULoadFinishRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 truckId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shipId = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shipid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shipid_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtoULoadFinishRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AtoULoadFinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AtoULoadFinishRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AtoULoadFinishRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AtoULoadFinishRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AtoULoadFinishRequest)
    MergeFrom(*source);
  }
}

void AtoULoadFinishRequest::MergeFrom(const AtoULoadFinishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AtoULoadFinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shipid_.MergeFrom(from.shipid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AtoULoadFinishRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AtoULoadFinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtoULoadFinishRequest::CopyFrom(const AtoULoadFinishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AtoULoadFinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtoULoadFinishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AtoULoadFinishRequest::InternalSwap(AtoULoadFinishRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shipid_.InternalSwap(&other->shipid_);
  swap(seqnum_, other->seqnum_);
  swap(truckid_, other->truckid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtoULoadFinishRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Delivery::InitAsDefaultInstance() {
}
class Delivery::_Internal {
 public:
  using HasBits = decltype(std::declval<Delivery>()._has_bits_);
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Delivery::Delivery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Delivery)
}
Delivery::Delivery(const Delivery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&shipid_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(shipid_));
  // @@protoc_insertion_point(copy_constructor:Delivery)
}

void Delivery::SharedCtor() {
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shipid_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(shipid_));
}

Delivery::~Delivery() {
  // @@protoc_insertion_point(destructor:Delivery)
  SharedDtor();
}

void Delivery::SharedDtor() {
}

void Delivery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Delivery& Delivery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Delivery_UA_2eproto.base);
  return *internal_default_instance();
}


void Delivery::Clear() {
// @@protoc_insertion_point(message_clear_start:Delivery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shipid_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(shipid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Delivery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 seqNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 shipId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Delivery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Delivery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seqNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seqnum(), target);
  }

  // required int64 shipId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_shipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Delivery)
  return target;
}

size_t Delivery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Delivery)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_shipid()) {
    // required int64 shipId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  return total_size;
}
size_t Delivery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Delivery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqNum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int64 shipId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Delivery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Delivery)
  GOOGLE_DCHECK_NE(&from, this);
  const Delivery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Delivery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Delivery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Delivery)
    MergeFrom(*source);
  }
}

void Delivery::MergeFrom(const Delivery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Delivery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      shipid_ = from.shipid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Delivery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Delivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delivery::CopyFrom(const Delivery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Delivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delivery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Delivery::InternalSwap(Delivery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seqnum_, other->seqnum_);
  swap(shipid_, other->shipid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Delivery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AtoUCommand::InitAsDefaultInstance() {
}
class AtoUCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<AtoUCommand>()._has_bits_);
  static void set_has_disconnection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AtoUCommand::AtoUCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AtoUCommand)
}
AtoUCommand::AtoUCommand(const AtoUCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      usrvlid_(from.usrvlid_),
      pikreq_(from.pikreq_),
      loadreq_(from.loadreq_),
      errmsg_(from.errmsg_),
      ack_(from.ack_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disconnection_ = from.disconnection_;
  // @@protoc_insertion_point(copy_constructor:AtoUCommand)
}

void AtoUCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AtoUCommand_UA_2eproto.base);
  disconnection_ = false;
}

AtoUCommand::~AtoUCommand() {
  // @@protoc_insertion_point(destructor:AtoUCommand)
  SharedDtor();
}

void AtoUCommand::SharedDtor() {
}

void AtoUCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtoUCommand& AtoUCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtoUCommand_UA_2eproto.base);
  return *internal_default_instance();
}


void AtoUCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:AtoUCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usrvlid_.Clear();
  pikreq_.Clear();
  loadreq_.Clear();
  errmsg_.Clear();
  ack_.Clear();
  disconnection_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AtoUCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .UserValidationRequest usrVlid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usrvlid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .AtoUPickupRequest pikReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pikreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .AtoULoadFinishRequest loadReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loadreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ErrorMessage errMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ack(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disconnection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_disconnection(&has_bits);
          disconnection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AtoUCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AtoUCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UserValidationRequest usrVlid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usrvlid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_usrvlid(i), target, stream);
  }

  // repeated .AtoUPickupRequest pikReq = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pikreq_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pikreq(i), target, stream);
  }

  // repeated .AtoULoadFinishRequest loadReq = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loadreq_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_loadreq(i), target, stream);
  }

  // repeated .ErrorMessage errMsg = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_errmsg(i), target, stream);
  }

  // repeated int64 ack = 5;
  for (int i = 0, n = this->_internal_ack_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ack(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool disconnection = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disconnection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AtoUCommand)
  return target;
}

size_t AtoUCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AtoUCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UserValidationRequest usrVlid = 1;
  total_size += 1UL * this->_internal_usrvlid_size();
  for (const auto& msg : this->usrvlid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AtoUPickupRequest pikReq = 2;
  total_size += 1UL * this->_internal_pikreq_size();
  for (const auto& msg : this->pikreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AtoULoadFinishRequest loadReq = 3;
  total_size += 1UL * this->_internal_loadreq_size();
  for (const auto& msg : this->loadreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ErrorMessage errMsg = 4;
  total_size += 1UL * this->_internal_errmsg_size();
  for (const auto& msg : this->errmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 ack = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ack_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_size());
    total_size += data_size;
  }

  // optional bool disconnection = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtoUCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AtoUCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AtoUCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AtoUCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AtoUCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AtoUCommand)
    MergeFrom(*source);
  }
}

void AtoUCommand::MergeFrom(const AtoUCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AtoUCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usrvlid_.MergeFrom(from.usrvlid_);
  pikreq_.MergeFrom(from.pikreq_);
  loadreq_.MergeFrom(from.loadreq_);
  errmsg_.MergeFrom(from.errmsg_);
  ack_.MergeFrom(from.ack_);
  if (from._internal_has_disconnection()) {
    _internal_set_disconnection(from._internal_disconnection());
  }
}

void AtoUCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AtoUCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtoUCommand::CopyFrom(const AtoUCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AtoUCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtoUCommand::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(usrvlid_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pikreq_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(loadreq_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(errmsg_)) return false;
  return true;
}

void AtoUCommand::InternalSwap(AtoUCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  usrvlid_.InternalSwap(&other->usrvlid_);
  pikreq_.InternalSwap(&other->pikreq_);
  loadreq_.InternalSwap(&other->loadreq_);
  errmsg_.InternalSwap(&other->errmsg_);
  ack_.InternalSwap(&other->ack_);
  swap(disconnection_, other->disconnection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtoUCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UtoACommand::InitAsDefaultInstance() {
}
class UtoACommand::_Internal {
 public:
  using HasBits = decltype(std::declval<UtoACommand>()._has_bits_);
  static void set_has_disconnection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UtoACommand::UtoACommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UtoACommand)
}
UtoACommand::UtoACommand(const UtoACommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      connection_(from.connection_),
      usrvlid_(from.usrvlid_),
      loadreq_(from.loadreq_),
      delivery_(from.delivery_),
      errmsg_(from.errmsg_),
      ack_(from.ack_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disconnection_ = from.disconnection_;
  // @@protoc_insertion_point(copy_constructor:UtoACommand)
}

void UtoACommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UtoACommand_UA_2eproto.base);
  disconnection_ = false;
}

UtoACommand::~UtoACommand() {
  // @@protoc_insertion_point(destructor:UtoACommand)
  SharedDtor();
}

void UtoACommand::SharedDtor() {
}

void UtoACommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtoACommand& UtoACommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtoACommand_UA_2eproto.base);
  return *internal_default_instance();
}


void UtoACommand::Clear() {
// @@protoc_insertion_point(message_clear_start:UtoACommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_.Clear();
  usrvlid_.Clear();
  loadreq_.Clear();
  delivery_.Clear();
  errmsg_.Clear();
  ack_.Clear();
  disconnection_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UtoACommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .UtoAConnect connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .UserValidationResponse usrVlid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usrvlid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .UtoALoadRequest loadReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loadreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Delivery delivery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivery(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ErrorMessage errMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ack(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disconnection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_disconnection(&has_bits);
          disconnection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtoACommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UtoACommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UtoAConnect connection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_connection(i), target, stream);
  }

  // repeated .UserValidationResponse usrVlid = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usrvlid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_usrvlid(i), target, stream);
  }

  // repeated .UtoALoadRequest loadReq = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loadreq_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_loadreq(i), target, stream);
  }

  // repeated .Delivery delivery = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delivery_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_delivery(i), target, stream);
  }

  // repeated .ErrorMessage errMsg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_errmsg(i), target, stream);
  }

  // repeated int64 ack = 6;
  for (int i = 0, n = this->_internal_ack_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ack(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool disconnection = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disconnection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UtoACommand)
  return target;
}

size_t UtoACommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UtoACommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UtoAConnect connection = 1;
  total_size += 1UL * this->_internal_connection_size();
  for (const auto& msg : this->connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UserValidationResponse usrVlid = 2;
  total_size += 1UL * this->_internal_usrvlid_size();
  for (const auto& msg : this->usrvlid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UtoALoadRequest loadReq = 3;
  total_size += 1UL * this->_internal_loadreq_size();
  for (const auto& msg : this->loadreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Delivery delivery = 4;
  total_size += 1UL * this->_internal_delivery_size();
  for (const auto& msg : this->delivery_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ErrorMessage errMsg = 5;
  total_size += 1UL * this->_internal_errmsg_size();
  for (const auto& msg : this->errmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 ack = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ack_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ack_size());
    total_size += data_size;
  }

  // optional bool disconnection = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtoACommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UtoACommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UtoACommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtoACommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UtoACommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UtoACommand)
    MergeFrom(*source);
  }
}

void UtoACommand::MergeFrom(const UtoACommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UtoACommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connection_.MergeFrom(from.connection_);
  usrvlid_.MergeFrom(from.usrvlid_);
  loadreq_.MergeFrom(from.loadreq_);
  delivery_.MergeFrom(from.delivery_);
  errmsg_.MergeFrom(from.errmsg_);
  ack_.MergeFrom(from.ack_);
  if (from._internal_has_disconnection()) {
    _internal_set_disconnection(from._internal_disconnection());
  }
}

void UtoACommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UtoACommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtoACommand::CopyFrom(const UtoACommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UtoACommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtoACommand::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(connection_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(usrvlid_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(loadreq_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivery_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(errmsg_)) return false;
  return true;
}

void UtoACommand::InternalSwap(UtoACommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connection_.InternalSwap(&other->connection_);
  usrvlid_.InternalSwap(&other->usrvlid_);
  loadreq_.InternalSwap(&other->loadreq_);
  delivery_.InternalSwap(&other->delivery_);
  errmsg_.InternalSwap(&other->errmsg_);
  ack_.InternalSwap(&other->ack_);
  swap(disconnection_, other->disconnection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtoACommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorMessage::InitAsDefaultInstance() {
}
class ErrorMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorMessage>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_originseqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ErrorMessage::ErrorMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_err()) {
    err_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:ErrorMessage)
}

void ErrorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorMessage_UA_2eproto.base);
  err_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&originseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:ErrorMessage)
  SharedDtor();
}

void ErrorMessage::SharedDtor() {
  err_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorMessage& ErrorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorMessage_UA_2eproto.base);
  return *internal_default_instance();
}


void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ErrorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ErrorMessage.err");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 originseqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_originseqnum(&has_bits);
          originseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ErrorMessage.err");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_originseqnum(), target);
  }

  // required int64 seqNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ErrorMessage)
  return target;
}

size_t ErrorMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ErrorMessage)
  size_t total_size = 0;

  if (_internal_has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  if (_internal_has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_originseqnum());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqNum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());

    // required int64 originseqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_originseqnum());

    // required int64 seqNum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ErrorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ErrorMessage)
    MergeFrom(*source);
  }
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      err_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_);
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ErrorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  err_.Swap(&other->err_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(originseqnum_, other->originseqnum_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UtoAConnect* Arena::CreateMaybeMessage< ::UtoAConnect >(Arena* arena) {
  return Arena::CreateInternal< ::UtoAConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::UserValidationRequest* Arena::CreateMaybeMessage< ::UserValidationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UserValidationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserValidationResponse* Arena::CreateMaybeMessage< ::UserValidationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::UserValidationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AtoUPickupRequest* Arena::CreateMaybeMessage< ::AtoUPickupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AtoUPickupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UtoALoadRequest* Arena::CreateMaybeMessage< ::UtoALoadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UtoALoadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Product* Arena::CreateMaybeMessage< ::Product >(Arena* arena) {
  return Arena::CreateInternal< ::Product >(arena);
}
template<> PROTOBUF_NOINLINE ::ShipInfo* Arena::CreateMaybeMessage< ::ShipInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ShipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AtoULoadFinishRequest* Arena::CreateMaybeMessage< ::AtoULoadFinishRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AtoULoadFinishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Delivery* Arena::CreateMaybeMessage< ::Delivery >(Arena* arena) {
  return Arena::CreateInternal< ::Delivery >(arena);
}
template<> PROTOBUF_NOINLINE ::AtoUCommand* Arena::CreateMaybeMessage< ::AtoUCommand >(Arena* arena) {
  return Arena::CreateInternal< ::AtoUCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::UtoACommand* Arena::CreateMaybeMessage< ::UtoACommand >(Arena* arena) {
  return Arena::CreateInternal< ::UtoACommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrorMessage* Arena::CreateMaybeMessage< ::ErrorMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ErrorMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
