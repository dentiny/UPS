// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_amazon.proto

#include "world_amazon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AErr_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AInitWarehouse_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ALoaded_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APack_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APackage_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APacked_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AProduct_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APurchaseMore_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APutOnTruck_world_5famazon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_world_5famazon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AQuery_world_5famazon_2eproto;
class AProductDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AProduct> _instance;
} _AProduct_default_instance_;
class AInitWarehouseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AInitWarehouse> _instance;
} _AInitWarehouse_default_instance_;
class AConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AConnect> _instance;
} _AConnect_default_instance_;
class AConnectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AConnected> _instance;
} _AConnected_default_instance_;
class APackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APack> _instance;
} _APack_default_instance_;
class APackedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APacked> _instance;
} _APacked_default_instance_;
class ALoadedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ALoaded> _instance;
} _ALoaded_default_instance_;
class APutOnTruckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APutOnTruck> _instance;
} _APutOnTruck_default_instance_;
class APurchaseMoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APurchaseMore> _instance;
} _APurchaseMore_default_instance_;
class AErrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AErr> _instance;
} _AErr_default_instance_;
class AQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AQuery> _instance;
} _AQuery_default_instance_;
class APackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APackage> _instance;
} _APackage_default_instance_;
class ACommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ACommands> _instance;
} _ACommands_default_instance_;
class AResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AResponses> _instance;
} _AResponses_default_instance_;
static void InitDefaultsscc_info_ACommands_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ACommands_default_instance_;
    new (ptr) ::ACommands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ACommands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ACommands_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ACommands_world_5famazon_2eproto}, {
      &scc_info_APurchaseMore_world_5famazon_2eproto.base,
      &scc_info_APack_world_5famazon_2eproto.base,
      &scc_info_APutOnTruck_world_5famazon_2eproto.base,
      &scc_info_AQuery_world_5famazon_2eproto.base,}};

static void InitDefaultsscc_info_AConnect_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AConnect_default_instance_;
    new (ptr) ::AConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AConnect_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AConnect_world_5famazon_2eproto}, {
      &scc_info_AInitWarehouse_world_5famazon_2eproto.base,}};

static void InitDefaultsscc_info_AConnected_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AConnected_default_instance_;
    new (ptr) ::AConnected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AConnected::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AConnected_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AConnected_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_AErr_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AErr_default_instance_;
    new (ptr) ::AErr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AErr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AErr_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AErr_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_AInitWarehouse_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AInitWarehouse_default_instance_;
    new (ptr) ::AInitWarehouse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AInitWarehouse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AInitWarehouse_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AInitWarehouse_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_ALoaded_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ALoaded_default_instance_;
    new (ptr) ::ALoaded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ALoaded::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ALoaded_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ALoaded_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_APack_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_APack_default_instance_;
    new (ptr) ::APack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::APack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APack_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_APack_world_5famazon_2eproto}, {
      &scc_info_AProduct_world_5famazon_2eproto.base,}};

static void InitDefaultsscc_info_APackage_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_APackage_default_instance_;
    new (ptr) ::APackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::APackage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APackage_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APackage_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_APacked_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_APacked_default_instance_;
    new (ptr) ::APacked();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::APacked::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APacked_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APacked_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_AProduct_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AProduct_default_instance_;
    new (ptr) ::AProduct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AProduct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AProduct_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AProduct_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_APurchaseMore_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_APurchaseMore_default_instance_;
    new (ptr) ::APurchaseMore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::APurchaseMore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APurchaseMore_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_APurchaseMore_world_5famazon_2eproto}, {
      &scc_info_AProduct_world_5famazon_2eproto.base,}};

static void InitDefaultsscc_info_APutOnTruck_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_APutOnTruck_default_instance_;
    new (ptr) ::APutOnTruck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::APutOnTruck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APutOnTruck_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APutOnTruck_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_AQuery_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AQuery_default_instance_;
    new (ptr) ::AQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AQuery_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AQuery_world_5famazon_2eproto}, {}};

static void InitDefaultsscc_info_AResponses_world_5famazon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AResponses_default_instance_;
    new (ptr) ::AResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AResponses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AResponses_world_5famazon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AResponses_world_5famazon_2eproto}, {
      &scc_info_APurchaseMore_world_5famazon_2eproto.base,
      &scc_info_APacked_world_5famazon_2eproto.base,
      &scc_info_ALoaded_world_5famazon_2eproto.base,
      &scc_info_AErr_world_5famazon_2eproto.base,
      &scc_info_APackage_world_5famazon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_world_5famazon_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_world_5famazon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_world_5famazon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_world_5famazon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AProduct, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AProduct, id_),
  PROTOBUF_FIELD_OFFSET(::AProduct, description_),
  PROTOBUF_FIELD_OFFSET(::AProduct, count_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::AInitWarehouse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AInitWarehouse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AInitWarehouse, id_),
  PROTOBUF_FIELD_OFFSET(::AInitWarehouse, x_),
  PROTOBUF_FIELD_OFFSET(::AInitWarehouse, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::AConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AConnect, worldid_),
  PROTOBUF_FIELD_OFFSET(::AConnect, initwh_),
  PROTOBUF_FIELD_OFFSET(::AConnect, isamazon_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::AConnected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AConnected, worldid_),
  PROTOBUF_FIELD_OFFSET(::AConnected, result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::APack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::APack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::APack, whnum_),
  PROTOBUF_FIELD_OFFSET(::APack, things_),
  PROTOBUF_FIELD_OFFSET(::APack, shipid_),
  PROTOBUF_FIELD_OFFSET(::APack, seqnum_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::APacked, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::APacked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::APacked, shipid_),
  PROTOBUF_FIELD_OFFSET(::APacked, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ALoaded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ALoaded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ALoaded, shipid_),
  PROTOBUF_FIELD_OFFSET(::ALoaded, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::APutOnTruck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::APutOnTruck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::APutOnTruck, whnum_),
  PROTOBUF_FIELD_OFFSET(::APutOnTruck, truckid_),
  PROTOBUF_FIELD_OFFSET(::APutOnTruck, shipid_),
  PROTOBUF_FIELD_OFFSET(::APutOnTruck, seqnum_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::APurchaseMore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::APurchaseMore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::APurchaseMore, whnum_),
  PROTOBUF_FIELD_OFFSET(::APurchaseMore, things_),
  PROTOBUF_FIELD_OFFSET(::APurchaseMore, seqnum_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::AErr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AErr, err_),
  PROTOBUF_FIELD_OFFSET(::AErr, originseqnum_),
  PROTOBUF_FIELD_OFFSET(::AErr, seqnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::AQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AQuery, packageid_),
  PROTOBUF_FIELD_OFFSET(::AQuery, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::APackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::APackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::APackage, packageid_),
  PROTOBUF_FIELD_OFFSET(::APackage, status_),
  PROTOBUF_FIELD_OFFSET(::APackage, seqnum_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::ACommands, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ACommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ACommands, buy_),
  PROTOBUF_FIELD_OFFSET(::ACommands, topack_),
  PROTOBUF_FIELD_OFFSET(::ACommands, load_),
  PROTOBUF_FIELD_OFFSET(::ACommands, queries_),
  PROTOBUF_FIELD_OFFSET(::ACommands, simspeed_),
  PROTOBUF_FIELD_OFFSET(::ACommands, disconnect_),
  PROTOBUF_FIELD_OFFSET(::ACommands, acks_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::AResponses, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AResponses, arrived_),
  PROTOBUF_FIELD_OFFSET(::AResponses, ready_),
  PROTOBUF_FIELD_OFFSET(::AResponses, loaded_),
  PROTOBUF_FIELD_OFFSET(::AResponses, finished_),
  PROTOBUF_FIELD_OFFSET(::AResponses, error_),
  PROTOBUF_FIELD_OFFSET(::AResponses, acks_),
  PROTOBUF_FIELD_OFFSET(::AResponses, packagestatus_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::AProduct)},
  { 11, 19, sizeof(::AInitWarehouse)},
  { 22, 30, sizeof(::AConnect)},
  { 33, 40, sizeof(::AConnected)},
  { 42, 51, sizeof(::APack)},
  { 55, 62, sizeof(::APacked)},
  { 64, 71, sizeof(::ALoaded)},
  { 73, 82, sizeof(::APutOnTruck)},
  { 86, 94, sizeof(::APurchaseMore)},
  { 97, 105, sizeof(::AErr)},
  { 108, 115, sizeof(::AQuery)},
  { 117, 125, sizeof(::APackage)},
  { 128, 140, sizeof(::ACommands)},
  { 147, 159, sizeof(::AResponses)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AProduct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AInitWarehouse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AConnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_APack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_APacked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ALoaded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_APutOnTruck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_APurchaseMore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AErr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_APackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ACommands_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AResponses_default_instance_),
};

const char descriptor_table_protodef_world_5famazon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022world_amazon.proto\":\n\010AProduct\022\n\n\002id\030\001"
  " \002(\003\022\023\n\013description\030\002 \002(\t\022\r\n\005count\030\003 \002(\005"
  "\"2\n\016AInitWarehouse\022\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 \002("
  "\005\022\t\n\001y\030\003 \002(\005\"N\n\010AConnect\022\017\n\007worldid\030\001 \001("
  "\003\022\037\n\006initwh\030\002 \003(\0132\017.AInitWarehouse\022\020\n\010is"
  "Amazon\030\003 \002(\010\"-\n\nAConnected\022\017\n\007worldid\030\001 "
  "\002(\003\022\016\n\006result\030\002 \002(\t\"Q\n\005APack\022\r\n\005whnum\030\001 "
  "\002(\005\022\031\n\006things\030\002 \003(\0132\t.AProduct\022\016\n\006shipid"
  "\030\003 \002(\003\022\016\n\006seqnum\030\004 \002(\003\")\n\007APacked\022\016\n\006shi"
  "pid\030\001 \002(\003\022\016\n\006seqnum\030\002 \002(\003\")\n\007ALoaded\022\016\n\006"
  "shipid\030\001 \002(\003\022\016\n\006seqnum\030\002 \002(\003\"M\n\013APutOnTr"
  "uck\022\r\n\005whnum\030\001 \002(\005\022\017\n\007truckid\030\002 \002(\005\022\016\n\006s"
  "hipid\030\003 \002(\003\022\016\n\006seqnum\030\004 \002(\003\"I\n\rAPurchase"
  "More\022\r\n\005whnum\030\001 \002(\005\022\031\n\006things\030\002 \003(\0132\t.AP"
  "roduct\022\016\n\006seqnum\030\003 \002(\003\"9\n\004AErr\022\013\n\003err\030\001 "
  "\002(\t\022\024\n\014originseqnum\030\002 \002(\003\022\016\n\006seqnum\030\003 \002("
  "\003\"+\n\006AQuery\022\021\n\tpackageid\030\001 \002(\003\022\016\n\006seqnum"
  "\030\002 \002(\003\"=\n\010APackage\022\021\n\tpackageid\030\001 \002(\003\022\016\n"
  "\006status\030\002 \002(\t\022\016\n\006seqnum\030\003 \002(\003\"\252\001\n\tAComma"
  "nds\022\033\n\003buy\030\001 \003(\0132\016.APurchaseMore\022\026\n\006topa"
  "ck\030\002 \003(\0132\006.APack\022\032\n\004load\030\003 \003(\0132\014.APutOnT"
  "ruck\022\030\n\007queries\030\004 \003(\0132\007.AQuery\022\020\n\010simspe"
  "ed\030\005 \001(\r\022\022\n\ndisconnect\030\006 \001(\010\022\014\n\004acks\030\007 \003"
  "(\003\"\270\001\n\nAResponses\022\037\n\007arrived\030\001 \003(\0132\016.APu"
  "rchaseMore\022\027\n\005ready\030\002 \003(\0132\010.APacked\022\030\n\006l"
  "oaded\030\003 \003(\0132\010.ALoaded\022\020\n\010finished\030\004 \001(\010\022"
  "\024\n\005error\030\005 \003(\0132\005.AErr\022\014\n\004acks\030\006 \003(\003\022 \n\rp"
  "ackagestatus\030\007 \003(\0132\t.APackage"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_world_5famazon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_world_5famazon_2eproto_sccs[14] = {
  &scc_info_ACommands_world_5famazon_2eproto.base,
  &scc_info_AConnect_world_5famazon_2eproto.base,
  &scc_info_AConnected_world_5famazon_2eproto.base,
  &scc_info_AErr_world_5famazon_2eproto.base,
  &scc_info_AInitWarehouse_world_5famazon_2eproto.base,
  &scc_info_ALoaded_world_5famazon_2eproto.base,
  &scc_info_APack_world_5famazon_2eproto.base,
  &scc_info_APackage_world_5famazon_2eproto.base,
  &scc_info_APacked_world_5famazon_2eproto.base,
  &scc_info_AProduct_world_5famazon_2eproto.base,
  &scc_info_APurchaseMore_world_5famazon_2eproto.base,
  &scc_info_APutOnTruck_world_5famazon_2eproto.base,
  &scc_info_AQuery_world_5famazon_2eproto.base,
  &scc_info_AResponses_world_5famazon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_world_5famazon_2eproto_once;
static bool descriptor_table_world_5famazon_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_5famazon_2eproto = {
  &descriptor_table_world_5famazon_2eproto_initialized, descriptor_table_protodef_world_5famazon_2eproto, "world_amazon.proto", 1109,
  &descriptor_table_world_5famazon_2eproto_once, descriptor_table_world_5famazon_2eproto_sccs, descriptor_table_world_5famazon_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_world_5famazon_2eproto::offsets,
  file_level_metadata_world_5famazon_2eproto, 14, file_level_enum_descriptors_world_5famazon_2eproto, file_level_service_descriptors_world_5famazon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_world_5famazon_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_world_5famazon_2eproto), true);

// ===================================================================

void AProduct::InitAsDefaultInstance() {
}
class AProduct::_Internal {
 public:
  using HasBits = decltype(std::declval<AProduct>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AProduct::AProduct()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AProduct)
}
AProduct::AProduct(const AProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:AProduct)
}

void AProduct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AProduct_world_5famazon_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

AProduct::~AProduct() {
  // @@protoc_insertion_point(destructor:AProduct)
  SharedDtor();
}

void AProduct::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AProduct& AProduct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AProduct_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:AProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AProduct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AProduct.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AProduct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AProduct.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // required int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AProduct)
  return target;
}

size_t AProduct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AProduct)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (_internal_has_count()) {
    // required int32 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t AProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AProduct)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());

    // required int32 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AProduct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const AProduct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AProduct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AProduct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AProduct)
    MergeFrom(*source);
  }
}

void AProduct::MergeFrom(const AProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AProduct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AProduct::CopyFrom(const AProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AProduct::InternalSwap(AProduct* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AProduct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AInitWarehouse::InitAsDefaultInstance() {
}
class AInitWarehouse::_Internal {
 public:
  using HasBits = decltype(std::declval<AInitWarehouse>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AInitWarehouse::AInitWarehouse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AInitWarehouse)
}
AInitWarehouse::AInitWarehouse(const AInitWarehouse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:AInitWarehouse)
}

void AInitWarehouse::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

AInitWarehouse::~AInitWarehouse() {
  // @@protoc_insertion_point(destructor:AInitWarehouse)
  SharedDtor();
}

void AInitWarehouse::SharedDtor() {
}

void AInitWarehouse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AInitWarehouse& AInitWarehouse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AInitWarehouse_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AInitWarehouse::Clear() {
// @@protoc_insertion_point(message_clear_start:AInitWarehouse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AInitWarehouse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AInitWarehouse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AInitWarehouse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AInitWarehouse)
  return target;
}

size_t AInitWarehouse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AInitWarehouse)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t AInitWarehouse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AInitWarehouse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AInitWarehouse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AInitWarehouse)
  GOOGLE_DCHECK_NE(&from, this);
  const AInitWarehouse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AInitWarehouse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AInitWarehouse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AInitWarehouse)
    MergeFrom(*source);
  }
}

void AInitWarehouse::MergeFrom(const AInitWarehouse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AInitWarehouse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AInitWarehouse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AInitWarehouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AInitWarehouse::CopyFrom(const AInitWarehouse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AInitWarehouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AInitWarehouse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AInitWarehouse::InternalSwap(AInitWarehouse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AInitWarehouse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AConnect::InitAsDefaultInstance() {
}
class AConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<AConnect>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isamazon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AConnect::AConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AConnect)
}
AConnect::AConnect(const AConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      initwh_(from.initwh_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isamazon_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(isamazon_));
  // @@protoc_insertion_point(copy_constructor:AConnect)
}

void AConnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AConnect_world_5famazon_2eproto.base);
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isamazon_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(isamazon_));
}

AConnect::~AConnect() {
  // @@protoc_insertion_point(destructor:AConnect)
  SharedDtor();
}

void AConnect::SharedDtor() {
}

void AConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AConnect& AConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AConnect_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:AConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  initwh_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&worldid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isamazon_) -
        reinterpret_cast<char*>(&worldid_)) + sizeof(isamazon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AInitWarehouse initwh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_initwh(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool isAmazon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isamazon(&has_bits);
          isamazon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // repeated .AInitWarehouse initwh = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_initwh_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_initwh(i), target, stream);
  }

  // required bool isAmazon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isamazon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AConnect)
  return target;
}

size_t AConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AConnect)
  size_t total_size = 0;

  // required bool isAmazon = 3;
  if (_internal_has_isamazon()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AInitWarehouse initwh = 2;
  total_size += 1UL * this->_internal_initwh_size();
  for (const auto& msg : this->initwh_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 worldid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const AConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AConnect)
    MergeFrom(*source);
  }
}

void AConnect::MergeFrom(const AConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  initwh_.MergeFrom(from.initwh_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      worldid_ = from.worldid_;
    }
    if (cached_has_bits & 0x00000002u) {
      isamazon_ = from.isamazon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AConnect::CopyFrom(const AConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(initwh_)) return false;
  return true;
}

void AConnect::InternalSwap(AConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  initwh_.InternalSwap(&other->initwh_);
  swap(worldid_, other->worldid_);
  swap(isamazon_, other->isamazon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AConnected::InitAsDefaultInstance() {
}
class AConnected::_Internal {
 public:
  using HasBits = decltype(std::declval<AConnected>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AConnected::AConnected()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AConnected)
}
AConnected::AConnected(const AConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_result()) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:AConnected)
}

void AConnected::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AConnected_world_5famazon_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worldid_ = PROTOBUF_LONGLONG(0);
}

AConnected::~AConnected() {
  // @@protoc_insertion_point(destructor:AConnected)
  SharedDtor();
}

void AConnected::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AConnected& AConnected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AConnected_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:AConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    result_.ClearNonDefaultToEmptyNoArena();
  }
  worldid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AConnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AConnected.result");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AConnected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  // required string result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AConnected.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AConnected)
  return target;
}

size_t AConnected::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AConnected)
  size_t total_size = 0;

  if (_internal_has_result()) {
    // required string result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  if (_internal_has_worldid()) {
    // required int64 worldid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());
  }

  return total_size;
}
size_t AConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AConnected)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string result = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());

    // required int64 worldid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_worldid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AConnected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const AConnected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AConnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AConnected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AConnected)
    MergeFrom(*source);
  }
}

void AConnected::MergeFrom(const AConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
    }
    if (cached_has_bits & 0x00000002u) {
      worldid_ = from.worldid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AConnected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AConnected::CopyFrom(const AConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AConnected::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AConnected::InternalSwap(AConnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AConnected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APack::InitAsDefaultInstance() {
}
class APack::_Internal {
 public:
  using HasBits = decltype(std::declval<APack>()._has_bits_);
  static void set_has_whnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

APack::APack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:APack)
}
APack::APack(const APack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      things_(from.things_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&whnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(whnum_));
  // @@protoc_insertion_point(copy_constructor:APack)
}

void APack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APack_world_5famazon_2eproto.base);
  ::memset(&shipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&whnum_) -
      reinterpret_cast<char*>(&shipid_)) + sizeof(whnum_));
}

APack::~APack() {
  // @@protoc_insertion_point(destructor:APack)
  SharedDtor();
}

void APack::SharedDtor() {
}

void APack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APack& APack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APack_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void APack::Clear() {
// @@protoc_insertion_point(message_clear_start:APack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  things_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(whnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 whnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_whnum(&has_bits);
          whnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AProduct things = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_things(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int64 shipid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:APack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 whnum = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_whnum(), target);
  }

  // repeated .AProduct things = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_things_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_things(i), target, stream);
  }

  // required int64 shipid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_shipid(), target);
  }

  // required int64 seqnum = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APack)
  return target;
}

size_t APack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APack)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_whnum()) {
    // required int32 whnum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());
  }

  return total_size;
}
size_t APack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APack)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int64 seqnum = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int32 whnum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AProduct things = 2;
  total_size += 1UL * this->_internal_things_size();
  for (const auto& msg : this->things_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APack)
  GOOGLE_DCHECK_NE(&from, this);
  const APack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APack)
    MergeFrom(*source);
  }
}

void APack::MergeFrom(const APack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  things_.MergeFrom(from.things_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      whnum_ = from.whnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APack::CopyFrom(const APack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(things_)) return false;
  return true;
}

void APack::InternalSwap(APack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  things_.InternalSwap(&other->things_);
  swap(shipid_, other->shipid_);
  swap(seqnum_, other->seqnum_);
  swap(whnum_, other->whnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APacked::InitAsDefaultInstance() {
}
class APacked::_Internal {
 public:
  using HasBits = decltype(std::declval<APacked>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

APacked::APacked()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:APacked)
}
APacked::APacked(const APacked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:APacked)
}

void APacked::SharedCtor() {
  ::memset(&shipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

APacked::~APacked() {
  // @@protoc_insertion_point(destructor:APacked)
  SharedDtor();
}

void APacked::SharedDtor() {
}

void APacked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APacked& APacked::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APacked_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void APacked::Clear() {
// @@protoc_insertion_point(message_clear_start:APacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APacked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APacked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:APacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APacked)
  return target;
}

size_t APacked::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APacked)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t APacked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APacked)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int64 seqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APacked::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APacked)
  GOOGLE_DCHECK_NE(&from, this);
  const APacked* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APacked>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APacked)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APacked)
    MergeFrom(*source);
  }
}

void APacked::MergeFrom(const APacked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APacked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APacked::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APacked::CopyFrom(const APacked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APacked::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void APacked::InternalSwap(APacked* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shipid_, other->shipid_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APacked::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ALoaded::InitAsDefaultInstance() {
}
class ALoaded::_Internal {
 public:
  using HasBits = decltype(std::declval<ALoaded>()._has_bits_);
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ALoaded::ALoaded()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ALoaded)
}
ALoaded::ALoaded(const ALoaded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shipid_, &from.shipid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:ALoaded)
}

void ALoaded::SharedCtor() {
  ::memset(&shipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
}

ALoaded::~ALoaded() {
  // @@protoc_insertion_point(destructor:ALoaded)
  SharedDtor();
}

void ALoaded::SharedDtor() {
}

void ALoaded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ALoaded& ALoaded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ALoaded_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void ALoaded::Clear() {
// @@protoc_insertion_point(message_clear_start:ALoaded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shipid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&shipid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ALoaded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 shipid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ALoaded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ALoaded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 shipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shipid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ALoaded)
  return target;
}

size_t ALoaded::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ALoaded)
  size_t total_size = 0;

  if (_internal_has_shipid()) {
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t ALoaded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ALoaded)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 shipid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int64 seqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ALoaded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ALoaded)
  GOOGLE_DCHECK_NE(&from, this);
  const ALoaded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ALoaded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ALoaded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ALoaded)
    MergeFrom(*source);
  }
}

void ALoaded::MergeFrom(const ALoaded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ALoaded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ALoaded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ALoaded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ALoaded::CopyFrom(const ALoaded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ALoaded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ALoaded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ALoaded::InternalSwap(ALoaded* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shipid_, other->shipid_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ALoaded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APutOnTruck::InitAsDefaultInstance() {
}
class APutOnTruck::_Internal {
 public:
  using HasBits = decltype(std::declval<APutOnTruck>()._has_bits_);
  static void set_has_whnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shipid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

APutOnTruck::APutOnTruck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:APutOnTruck)
}
APutOnTruck::APutOnTruck(const APutOnTruck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&whnum_, &from.whnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&whnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:APutOnTruck)
}

void APutOnTruck::SharedCtor() {
  ::memset(&whnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&whnum_)) + sizeof(seqnum_));
}

APutOnTruck::~APutOnTruck() {
  // @@protoc_insertion_point(destructor:APutOnTruck)
  SharedDtor();
}

void APutOnTruck::SharedDtor() {
}

void APutOnTruck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APutOnTruck& APutOnTruck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APutOnTruck_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void APutOnTruck::Clear() {
// @@protoc_insertion_point(message_clear_start:APutOnTruck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&whnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&whnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APutOnTruck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 whnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_whnum(&has_bits);
          whnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 truckid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 shipid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shipid(&has_bits);
          shipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APutOnTruck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:APutOnTruck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 whnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_whnum(), target);
  }

  // required int32 truckid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_truckid(), target);
  }

  // required int64 shipid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_shipid(), target);
  }

  // required int64 seqnum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APutOnTruck)
  return target;
}

size_t APutOnTruck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APutOnTruck)
  size_t total_size = 0;

  if (_internal_has_whnum()) {
    // required int32 whnum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_truckid());
  }

  if (_internal_has_shipid()) {
    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t APutOnTruck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APutOnTruck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 whnum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());

    // required int32 truckid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_truckid());

    // required int64 shipid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shipid());

    // required int64 seqnum = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APutOnTruck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APutOnTruck)
  GOOGLE_DCHECK_NE(&from, this);
  const APutOnTruck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APutOnTruck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APutOnTruck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APutOnTruck)
    MergeFrom(*source);
  }
}

void APutOnTruck::MergeFrom(const APutOnTruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APutOnTruck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      whnum_ = from.whnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000004u) {
      shipid_ = from.shipid_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APutOnTruck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APutOnTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APutOnTruck::CopyFrom(const APutOnTruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APutOnTruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APutOnTruck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void APutOnTruck::InternalSwap(APutOnTruck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(whnum_, other->whnum_);
  swap(truckid_, other->truckid_);
  swap(shipid_, other->shipid_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APutOnTruck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APurchaseMore::InitAsDefaultInstance() {
}
class APurchaseMore::_Internal {
 public:
  using HasBits = decltype(std::declval<APurchaseMore>()._has_bits_);
  static void set_has_whnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

APurchaseMore::APurchaseMore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:APurchaseMore)
}
APurchaseMore::APurchaseMore(const APurchaseMore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      things_(from.things_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seqnum_, &from.seqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&whnum_) -
    reinterpret_cast<char*>(&seqnum_)) + sizeof(whnum_));
  // @@protoc_insertion_point(copy_constructor:APurchaseMore)
}

void APurchaseMore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APurchaseMore_world_5famazon_2eproto.base);
  ::memset(&seqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&whnum_) -
      reinterpret_cast<char*>(&seqnum_)) + sizeof(whnum_));
}

APurchaseMore::~APurchaseMore() {
  // @@protoc_insertion_point(destructor:APurchaseMore)
  SharedDtor();
}

void APurchaseMore::SharedDtor() {
}

void APurchaseMore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APurchaseMore& APurchaseMore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APurchaseMore_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void APurchaseMore::Clear() {
// @@protoc_insertion_point(message_clear_start:APurchaseMore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  things_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whnum_) -
        reinterpret_cast<char*>(&seqnum_)) + sizeof(whnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APurchaseMore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 whnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_whnum(&has_bits);
          whnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AProduct things = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_things(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APurchaseMore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:APurchaseMore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 whnum = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_whnum(), target);
  }

  // repeated .AProduct things = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_things_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_things(i), target, stream);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APurchaseMore)
  return target;
}

size_t APurchaseMore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APurchaseMore)
  size_t total_size = 0;

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  if (_internal_has_whnum()) {
    // required int32 whnum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());
  }

  return total_size;
}
size_t APurchaseMore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APurchaseMore)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seqnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

    // required int32 whnum = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_whnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AProduct things = 2;
  total_size += 1UL * this->_internal_things_size();
  for (const auto& msg : this->things_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APurchaseMore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APurchaseMore)
  GOOGLE_DCHECK_NE(&from, this);
  const APurchaseMore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APurchaseMore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APurchaseMore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APurchaseMore)
    MergeFrom(*source);
  }
}

void APurchaseMore::MergeFrom(const APurchaseMore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APurchaseMore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  things_.MergeFrom(from.things_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      whnum_ = from.whnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APurchaseMore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APurchaseMore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APurchaseMore::CopyFrom(const APurchaseMore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APurchaseMore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APurchaseMore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(things_)) return false;
  return true;
}

void APurchaseMore::InternalSwap(APurchaseMore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  things_.InternalSwap(&other->things_);
  swap(seqnum_, other->seqnum_);
  swap(whnum_, other->whnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APurchaseMore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AErr::InitAsDefaultInstance() {
}
class AErr::_Internal {
 public:
  using HasBits = decltype(std::declval<AErr>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_originseqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AErr::AErr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AErr)
}
AErr::AErr(const AErr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_err()) {
    err_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AErr)
}

void AErr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AErr_world_5famazon_2eproto.base);
  err_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&originseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

AErr::~AErr() {
  // @@protoc_insertion_point(destructor:AErr)
  SharedDtor();
}

void AErr::SharedDtor() {
  err_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AErr& AErr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AErr_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AErr::Clear() {
// @@protoc_insertion_point(message_clear_start:AErr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AErr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AErr.err");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 originseqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_originseqnum(&has_bits);
          originseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AErr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AErr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AErr.err");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_originseqnum(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AErr)
  return target;
}

size_t AErr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AErr)
  size_t total_size = 0;

  if (_internal_has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  if (_internal_has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_originseqnum());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t AErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AErr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());

    // required int64 originseqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_originseqnum());

    // required int64 seqnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AErr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AErr)
  GOOGLE_DCHECK_NE(&from, this);
  const AErr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AErr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AErr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AErr)
    MergeFrom(*source);
  }
}

void AErr::MergeFrom(const AErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AErr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      err_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_);
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AErr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AErr::CopyFrom(const AErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AErr::InternalSwap(AErr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  err_.Swap(&other->err_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(originseqnum_, other->originseqnum_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AErr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AQuery::InitAsDefaultInstance() {
}
class AQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<AQuery>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AQuery::AQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AQuery)
}
AQuery::AQuery(const AQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AQuery)
}

void AQuery::SharedCtor() {
  ::memset(&packageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

AQuery::~AQuery() {
  // @@protoc_insertion_point(destructor:AQuery)
  SharedDtor();
}

void AQuery::SharedDtor() {
}

void AQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AQuery& AQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AQuery_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:AQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AQuery)
  return target;
}

size_t AQuery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AQuery)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t AQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AQuery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_packageid());

    // required int64 seqnum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const AQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AQuery)
    MergeFrom(*source);
  }
}

void AQuery::MergeFrom(const AQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AQuery::CopyFrom(const AQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AQuery::InternalSwap(AQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packageid_, other->packageid_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APackage::InitAsDefaultInstance() {
}
class APackage::_Internal {
 public:
  using HasBits = decltype(std::declval<APackage>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

APackage::APackage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:APackage)
}
APackage::APackage(const APackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:APackage)
}

void APackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APackage_world_5famazon_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

APackage::~APackage() {
  // @@protoc_insertion_point(destructor:APackage)
  SharedDtor();
}

void APackage::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void APackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APackage& APackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APackage_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void APackage::Clear() {
// @@protoc_insertion_point(message_clear_start:APackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "APackage.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:APackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required string status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "APackage.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:APackage)
  return target;
}

size_t APackage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:APackage)
  size_t total_size = 0;

  if (_internal_has_status()) {
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());
  }

  return total_size;
}
size_t APackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:APackage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());

    // required int64 packageid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_packageid());

    // required int64 seqnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:APackage)
  GOOGLE_DCHECK_NE(&from, this);
  const APackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:APackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:APackage)
    MergeFrom(*source);
  }
}

void APackage::MergeFrom(const APackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:APackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:APackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APackage::CopyFrom(const APackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:APackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void APackage::InternalSwap(APackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(packageid_, other->packageid_);
  swap(seqnum_, other->seqnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ACommands::InitAsDefaultInstance() {
}
class ACommands::_Internal {
 public:
  using HasBits = decltype(std::declval<ACommands>()._has_bits_);
  static void set_has_simspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ACommands::ACommands()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ACommands)
}
ACommands::ACommands(const ACommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      buy_(from.buy_),
      topack_(from.topack_),
      load_(from.load_),
      queries_(from.queries_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&simspeed_, &from.simspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnect_) -
    reinterpret_cast<char*>(&simspeed_)) + sizeof(disconnect_));
  // @@protoc_insertion_point(copy_constructor:ACommands)
}

void ACommands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ACommands_world_5famazon_2eproto.base);
  ::memset(&simspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnect_) -
      reinterpret_cast<char*>(&simspeed_)) + sizeof(disconnect_));
}

ACommands::~ACommands() {
  // @@protoc_insertion_point(destructor:ACommands)
  SharedDtor();
}

void ACommands::SharedDtor() {
}

void ACommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ACommands& ACommands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ACommands_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void ACommands::Clear() {
// @@protoc_insertion_point(message_clear_start:ACommands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  topack_.Clear();
  load_.Clear();
  queries_.Clear();
  acks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&simspeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disconnect_) -
        reinterpret_cast<char*>(&simspeed_)) + sizeof(disconnect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ACommands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .APurchaseMore buy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .APack topack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .APutOnTruck load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_load(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .AQuery queries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 simspeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_simspeed(&has_bits);
          simspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_disconnect(&has_bits);
          disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 acks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ACommands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ACommands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .APurchaseMore buy = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buy(i), target, stream);
  }

  // repeated .APack topack = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_topack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_topack(i), target, stream);
  }

  // repeated .APutOnTruck load = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_load_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_load(i), target, stream);
  }

  // repeated .AQuery queries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_queries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_queries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 simspeed = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_simspeed(), target);
  }

  // optional bool disconnect = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disconnect(), target);
  }

  // repeated int64 acks = 7;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ACommands)
  return target;
}

size_t ACommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ACommands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .APurchaseMore buy = 1;
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .APack topack = 2;
  total_size += 1UL * this->_internal_topack_size();
  for (const auto& msg : this->topack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .APutOnTruck load = 3;
  total_size += 1UL * this->_internal_load_size();
  for (const auto& msg : this->load_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AQuery queries = 4;
  total_size += 1UL * this->_internal_queries_size();
  for (const auto& msg : this->queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 simspeed = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_simspeed());
    }

    // optional bool disconnect = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACommands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ACommands)
  GOOGLE_DCHECK_NE(&from, this);
  const ACommands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ACommands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ACommands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ACommands)
    MergeFrom(*source);
  }
}

void ACommands::MergeFrom(const ACommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ACommands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  topack_.MergeFrom(from.topack_);
  load_.MergeFrom(from.load_);
  queries_.MergeFrom(from.queries_);
  acks_.MergeFrom(from.acks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      simspeed_ = from.simspeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      disconnect_ = from.disconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACommands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ACommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACommands::CopyFrom(const ACommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ACommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(buy_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(topack_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(load_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(queries_)) return false;
  return true;
}

void ACommands::InternalSwap(ACommands* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buy_.InternalSwap(&other->buy_);
  topack_.InternalSwap(&other->topack_);
  load_.InternalSwap(&other->load_);
  queries_.InternalSwap(&other->queries_);
  acks_.InternalSwap(&other->acks_);
  swap(simspeed_, other->simspeed_);
  swap(disconnect_, other->disconnect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ACommands::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AResponses::InitAsDefaultInstance() {
}
class AResponses::_Internal {
 public:
  using HasBits = decltype(std::declval<AResponses>()._has_bits_);
  static void set_has_finished(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AResponses::AResponses()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AResponses)
}
AResponses::AResponses(const AResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      arrived_(from.arrived_),
      ready_(from.ready_),
      loaded_(from.loaded_),
      error_(from.error_),
      acks_(from.acks_),
      packagestatus_(from.packagestatus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  finished_ = from.finished_;
  // @@protoc_insertion_point(copy_constructor:AResponses)
}

void AResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AResponses_world_5famazon_2eproto.base);
  finished_ = false;
}

AResponses::~AResponses() {
  // @@protoc_insertion_point(destructor:AResponses)
  SharedDtor();
}

void AResponses::SharedDtor() {
}

void AResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AResponses& AResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AResponses_world_5famazon_2eproto.base);
  return *internal_default_instance();
}


void AResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:AResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrived_.Clear();
  ready_.Clear();
  loaded_.Clear();
  error_.Clear();
  acks_.Clear();
  packagestatus_.Clear();
  finished_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .APurchaseMore arrived = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrived(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .APacked ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ready(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ALoaded loaded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loaded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool finished = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_finished(&has_bits);
          finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .AErr error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 acks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .APackage packagestatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packagestatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .APurchaseMore arrived = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arrived_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arrived(i), target, stream);
  }

  // repeated .APacked ready = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ready_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ready(i), target, stream);
  }

  // repeated .ALoaded loaded = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loaded_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_loaded(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool finished = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_finished(), target);
  }

  // repeated .AErr error = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_error(i), target, stream);
  }

  // repeated int64 acks = 6;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_acks(i), target);
  }

  // repeated .APackage packagestatus = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packagestatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_packagestatus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AResponses)
  return target;
}

size_t AResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .APurchaseMore arrived = 1;
  total_size += 1UL * this->_internal_arrived_size();
  for (const auto& msg : this->arrived_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .APacked ready = 2;
  total_size += 1UL * this->_internal_ready_size();
  for (const auto& msg : this->ready_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ALoaded loaded = 3;
  total_size += 1UL * this->_internal_loaded_size();
  for (const auto& msg : this->loaded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AErr error = 5;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // repeated .APackage packagestatus = 7;
  total_size += 1UL * this->_internal_packagestatus_size();
  for (const auto& msg : this->packagestatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool finished = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const AResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AResponses)
    MergeFrom(*source);
  }
}

void AResponses::MergeFrom(const AResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arrived_.MergeFrom(from.arrived_);
  ready_.MergeFrom(from.ready_);
  loaded_.MergeFrom(from.loaded_);
  error_.MergeFrom(from.error_);
  acks_.MergeFrom(from.acks_);
  packagestatus_.MergeFrom(from.packagestatus_);
  if (from._internal_has_finished()) {
    _internal_set_finished(from._internal_finished());
  }
}

void AResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AResponses::CopyFrom(const AResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AResponses::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(arrived_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ready_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(loaded_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(packagestatus_)) return false;
  return true;
}

void AResponses::InternalSwap(AResponses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arrived_.InternalSwap(&other->arrived_);
  ready_.InternalSwap(&other->ready_);
  loaded_.InternalSwap(&other->loaded_);
  error_.InternalSwap(&other->error_);
  acks_.InternalSwap(&other->acks_);
  packagestatus_.InternalSwap(&other->packagestatus_);
  swap(finished_, other->finished_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AProduct* Arena::CreateMaybeMessage< ::AProduct >(Arena* arena) {
  return Arena::CreateInternal< ::AProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::AInitWarehouse* Arena::CreateMaybeMessage< ::AInitWarehouse >(Arena* arena) {
  return Arena::CreateInternal< ::AInitWarehouse >(arena);
}
template<> PROTOBUF_NOINLINE ::AConnect* Arena::CreateMaybeMessage< ::AConnect >(Arena* arena) {
  return Arena::CreateInternal< ::AConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::AConnected* Arena::CreateMaybeMessage< ::AConnected >(Arena* arena) {
  return Arena::CreateInternal< ::AConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::APack* Arena::CreateMaybeMessage< ::APack >(Arena* arena) {
  return Arena::CreateInternal< ::APack >(arena);
}
template<> PROTOBUF_NOINLINE ::APacked* Arena::CreateMaybeMessage< ::APacked >(Arena* arena) {
  return Arena::CreateInternal< ::APacked >(arena);
}
template<> PROTOBUF_NOINLINE ::ALoaded* Arena::CreateMaybeMessage< ::ALoaded >(Arena* arena) {
  return Arena::CreateInternal< ::ALoaded >(arena);
}
template<> PROTOBUF_NOINLINE ::APutOnTruck* Arena::CreateMaybeMessage< ::APutOnTruck >(Arena* arena) {
  return Arena::CreateInternal< ::APutOnTruck >(arena);
}
template<> PROTOBUF_NOINLINE ::APurchaseMore* Arena::CreateMaybeMessage< ::APurchaseMore >(Arena* arena) {
  return Arena::CreateInternal< ::APurchaseMore >(arena);
}
template<> PROTOBUF_NOINLINE ::AErr* Arena::CreateMaybeMessage< ::AErr >(Arena* arena) {
  return Arena::CreateInternal< ::AErr >(arena);
}
template<> PROTOBUF_NOINLINE ::AQuery* Arena::CreateMaybeMessage< ::AQuery >(Arena* arena) {
  return Arena::CreateInternal< ::AQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::APackage* Arena::CreateMaybeMessage< ::APackage >(Arena* arena) {
  return Arena::CreateInternal< ::APackage >(arena);
}
template<> PROTOBUF_NOINLINE ::ACommands* Arena::CreateMaybeMessage< ::ACommands >(Arena* arena) {
  return Arena::CreateInternal< ::ACommands >(arena);
}
template<> PROTOBUF_NOINLINE ::AResponses* Arena::CreateMaybeMessage< ::AResponses >(Arena* arena) {
  return Arena::CreateInternal< ::AResponses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
